A special symbol {} indicates that the value that is passed to format method is placed here. Each pair of curly braces represents one place for the substitution.

Values that are placed in curly braces may be of different types. For example, it can be a string, number or list:

In [3]: print('{}'.format('10.1.1.1'))
10.1.1.1

In [4]: print('{}'.format(100))
100

In [5]: print('{}'.format([10, 1, 1,1]))
[10, 1, 1, 1]
You can align result in columns by formatting strings. In string formatting, you can specify how many characters are selected for the data. If number of characters in the data is less than number of characters selected, the missing characters are filled with blanks.

For example, you can allign data in columns of equal width of 15 characters with right side alignment:

[200~In [3]: vlan, mac, intf = ['100', 'aabb.cc80.7000', 'Gi0/1']

In [4]: print("{:>15} {:>15} {:>15}".format(vlan, mac, intf))
            100  aabb.cc80.7000           Gi0/1
	    Alignment to the left:

	    In [5]: print("{:15} {:15} {:15}".format(vlan, mac, intf))
	    100             aabb.cc80.7000  Gi0/1
	    Output template can also be multi-string:

	    In [6]: ip_template = '''
	       ...: IP address:
	          ...: {}
		     ...: '''

		     In [7]: print(ip_template.format('10.1.1.1'))

		     IP address:
		     10.1.1.1
		     You can also use string formatting to change the display format of numbers.

		     For example, you can specify how many digits after the comma to sho

Git â€“ You need to be familiar with Git. Both how to use it but also be aware of the nomenclature that comes with it. You should be aware of things like:

How do you clone a repo?
How do you initialize a directory to be tracked by Git?
What is the working directory?
How do you add files to the staging area?
How do you commit files?
How can you check the status?
How do you diff files?
How do you push changes to remote repo?
How do you resolve merge conflicts?
I highly recommend getting some exposure to Git also for your daily work if you can. Maybe start tracking configuration files in Git?

Postman â€“ Postman is an excellent tool for understanding how API works. Itâ€™s easy to setup different HTTP requests, modifying headers and payload and seeing how the response is formatted. Get familiar with Postman and use the collections provided by Cisco as well as Nick Russo. These are very helpful.

Sandboxes â€“ Cisco DevNet provides a lot of free sandboxes. There are both those that are always-on as well as those that need a reservation. This is an excellent resource that you canâ€™t afford to miss out on. Use them to get exposure to different architectures such as DNAC and SD-WAN.

APIs â€“ A lot of this exam is about understanding how to use APIs. You should be familiar with how to read API docs, how to authenticate yourself so that you can use the API. Are there different ways of authenticating? How do you need to format your request to get a response back? How do you troubleshoot a call that is not working? Get a lot of hands-on using APIs, both with Postman but also by using Python. Be familiar with using the requests library
I have by no means covered all of what you need to know for this exam. Hopefully I have highlighted some of the important concepts, though. Be aware that it is a broad exam as mentioned previously.

Now, for the test itself, it was my first time using Pearson Vue and their OnVue and it wasnâ€™t a perfect experience by any means. You register for a test online and 30 minutes before your exam, you can start the check in process. That means that you have to provide pictures of the room you are taking the test in, as well as some form of identification such as your driverâ€™s license. This process didnâ€™t go exactly smoothly for me as there was some kind of bug so that when I was to take a picture of my driverâ€™s license, the camera was facing me *sigh*.

The OnVue app that you run on your computer basically shuts down everything else and runs some kind of browser lock to provide the exam to you. Make sure that this app can run before you take the test. Maybe you have some security software blocking it? Give it a go by downloading the app and trying it. It will test your camera, mic and your throughput on the network. Be aware that it doesnâ€™t support all operating systems.

When you have checked in, you will get assigned a proctor. This can take some time. It took 20 minutes for me, I think. Iâ€™ve heard people waiting for hours. Hopefully thatâ€™s not the case for you. .
